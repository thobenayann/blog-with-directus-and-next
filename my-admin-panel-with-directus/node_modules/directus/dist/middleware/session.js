"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.session = void 0;
const express_session_1 = __importDefault(require("express-session"));
const env_1 = __importDefault(require("../env"));
const get_config_from_env_1 = require("../utils/get-config-from-env");
const database_1 = __importDefault(require("../database"));
let store = undefined;
if (env_1.default.SESSION_STORE === 'redis') {
    const Redis = require('ioredis');
    const RedisStore = require('connect-redis')(express_session_1.default);
    const redisClient = new Redis(env_1.default.SESSION_REDIS || (0, get_config_from_env_1.getConfigFromEnv)('SESSION_REDIS_'));
    store = new RedisStore({ client: redisClient });
}
if (env_1.default.SESSION_STORE === 'memcache') {
    const MemcachedStore = require('connect-memcached')(express_session_1.default);
    store = new MemcachedStore((0, get_config_from_env_1.getConfigFromEnv)('SESSION_MEMCACHE_'));
}
if (env_1.default.SESSION_STORE === 'database') {
    const KnexSessionStore = require('connect-session-knex')(express_session_1.default);
    store = new KnexSessionStore({
        knex: (0, database_1.default)(),
        tablename: 'oauth_sessions', // optional. Defaults to 'sessions'
    });
}
exports.session = (0, express_session_1.default)({ store, secret: env_1.default.SECRET, saveUninitialized: false, resave: false });
