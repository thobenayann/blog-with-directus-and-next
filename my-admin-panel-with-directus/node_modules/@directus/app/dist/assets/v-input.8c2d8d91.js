import{r as d,p as o,q as a,w as r,B as l,P as e}from"./vendor.62143b15.js";const s=l("div",{class:"markdown-body"},[l("p",null,"Displays the usual input. Can be used to model strings and numbers."),l("pre",null,[l("code",{class:"language-html"},[l("span",{class:"hljs-tag"},[e("<"),l("span",{class:"hljs-name"},"v-input"),e(),l("span",{class:"hljs-attr"},"v-model"),e("="),l("span",{class:"hljs-string"},'"value"'),e(" />")]),e(`
`)])]),l("h2",{id:"attributes-%26-events"},[e("Attributes & Events "),l("a",{class:"header-anchor",href:"#attributes-%26-events"},"#")]),l("p",null,[e("The HTML "),l("code",null,"<input>"),e(" element supports a huge amount of attributes and events. In order to support all of these, all props that aren\u2019t specially handled (see list below) will be passed on to the "),l("code",null,"<input>"),e(" element directly. This allows you to change anything you want on the input.")]),l("h2",{id:"prefixes-%2F-suffixes"},[e("Prefixes / Suffixes "),l("a",{class:"header-anchor",href:"#prefixes-%2F-suffixes"},"#")]),l("p",null,[e("You can add any custom (text) prefix/suffix to the value in the input using the "),l("code",null,"prefix"),e(" and "),l("code",null,"suffix"),e(" slots.")]),l("h2",{id:"reference"},[e("Reference "),l("a",{class:"header-anchor",href:"#reference"},"#")]),l("h4",{id:"props"},[e("Props "),l("a",{class:"header-anchor",href:"#props"},"#")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Prop"),l("th",null,"Description"),l("th",null,"Default"),l("th",null,"Type")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"value")]),l("td",null,[e("Used with "),l("code",null,"v-model"),e(" to mirror the entered value")]),l("td",null,[l("code",null,"null")]),l("td",null,[l("code",null,"[String, Number]")])]),l("tr",null,[l("td",null,[l("code",null,"autofocus")]),l("td",null,"Autofocusses the input on render"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"disabled")]),l("td",null,"Set the disabled state for the input"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"full-width")]),l("td",null,"Render the input with 100% width"),l("td",null,[l("code",null,"true")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"prefix")]),l("td",null,"Prefix the users value with a value"),l("td",null,[l("code",null,"null")]),l("td",null,[l("code",null,"String")])]),l("tr",null,[l("td",null,[l("code",null,"suffix")]),l("td",null,"Show a value at the end of the input"),l("td",null,[l("code",null,"null")]),l("td",null,[l("code",null,"String")])]),l("tr",null,[l("td",null,[l("code",null,"slug")]),l("td",null,"Force the value to be URL safe"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"slug-separator")]),l("td",null,"What character to use as separator in slugs"),l("td",null,[l("code",null,"'-'")]),l("td",null,[l("code",null,"String")])]),l("tr",null,[l("td",null,[l("code",null,"active")]),l("td",null,"Force the focus state"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"trim")]),l("td",null,"Trim the start and end whitespace"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"nullable")]),l("td",null,"When active, sets an empty entry to null"),l("td",null,[l("code",null,"true")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"type")]),l("td",null,[e("Can be "),l("code",null,"text"),e(" or "),l("code",null,"number")]),l("td",null,[l("code",null,"'text'")]),l("td",null,[l("code",null,"String")])]),l("tr",null,[l("td",null,[l("code",null,"max")]),l("td",null,"The maximum number that can be entered"),l("td",null,[l("code",null,"null")]),l("td",null,[l("code",null,"Number")])]),l("tr",null,[l("td",null,[l("code",null,"min")]),l("td",null,"The minimum number that can be entered"),l("td",null,[l("code",null,"null")]),l("td",null,[l("code",null,"Number")])]),l("tr",null,[l("td",null,[l("code",null,"step")]),l("td",null,"In which unit steps should be counted up or down"),l("td",null,[l("code",null,"1")]),l("td",null,[l("code",null,"Number")])]),l("tr",null,[l("td",null,[l("code",null,"db-safe")]),l("td",null,"Make the value save to be used with the DB"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])]),l("tr",null,[l("td",null,[l("code",null,"hide-arrows")]),l("td",null,"Hide the arrows that are used to increase or decrease a number"),l("td",null,[l("code",null,"false")]),l("td",null,[l("code",null,"Boolean")])])])]),l("p",null,[e("Note: all other attached attributes are bound to the input HTMLElement in the component. This allows you to attach any of the standard HTML attributes like "),l("code",null,"min"),e(", "),l("code",null,"length"),e(", or "),l("code",null,"pattern"),e(".")]),l("h4",{id:"slots"},[e("Slots "),l("a",{class:"header-anchor",href:"#slots"},"#")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Slot"),l("th",null,"Description"),l("th",null,"Data")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"prepend-outer")]),l("td",null,"Before the input"),l("td",null,[l("code",null,"{ disabled: boolean, value: string or number; }")])]),l("tr",null,[l("td",null,[l("code",null,"prepend")]),l("td",null,"In the input, before the value, before the prefix"),l("td",null,[l("code",null,"{ disabled: boolean, value: string or number; }")])]),l("tr",null,[l("td",null,[l("code",null,"append")]),l("td",null,"In the input, after the value, after the suffix"),l("td",null,[l("code",null,"{ disabled: boolean, value: string or number; }")])]),l("tr",null,[l("td",null,[l("code",null,"append-outer")]),l("td",null,"After the input"),l("td",null,[l("code",null,"{ disabled: boolean, value: string or number; }")])]),l("tr",null,[l("td",null,[l("code",null,"input")]),l("td"),l("td")])])]),l("h4",{id:"css-variables"},[e("CSS Variables "),l("a",{class:"header-anchor",href:"#css-variables"},"#")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Variable"),l("th",null,"Default")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"--v-input-font-family")]),l("td",null,[l("code",null,"var(--family-sans-serif)")])]),l("tr",null,[l("td",null,[l("code",null,"--v-input-placeholder-color")]),l("td",null,[l("code",null,"var(--foreground-subdued)")])])])]),l("h4",{id:"events"},[e("Events "),l("a",{class:"header-anchor",href:"#events"},"#")]),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Event"),l("th",null,"Description"),l("th",null,"Value")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"click")]),l("td",null,"Fires when the input gets clicked"),l("td")]),l("tr",null,[l("td",null,[l("code",null,"keydown")]),l("td",null,"When a key has been pressed"),l("td")]),l("tr",null,[l("td",null,[l("code",null,"input")]),l("td",null,"Updated the modeled value"),l("td",null,[l("code",null,"String or Number")])])])])],-1),f={setup(c,{expose:t}){const n={title:"Input",modularExtension:!1};return t({frontmatter:n}),(i,h)=>{const u=d("DocsWrapper");return o(),a(u,{frontmatter:n},{default:r(()=>[s]),_:1})}}};export{f as default};
