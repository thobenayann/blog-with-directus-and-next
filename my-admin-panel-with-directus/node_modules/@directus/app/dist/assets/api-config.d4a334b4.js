import{r as n,p as l,q as c,w as i,B as e,t as u,P as o}from"./vendor.62143b15.js";const h={class:"markdown-body"},d=e("p",null,[e("div",{class:"table-of-contents"},[e("ul",null,[e("li",null,[e("a",{href:"#cache"},"Cache")]),e("li",null,[e("a",{href:"#oauth-(single-sign-on-(sso)-%2F-openid)"},"oAuth (Single Sign-On (SSO) / OpenID)")]),e("li",null,[e("a",{href:"#file-storage"},"File Storage")]),e("li",null,[e("a",{href:"#rate-limiting"},"Rate Limiting")]),e("li",null,[e("a",{href:"#file-based-configuration"},"File-Based Configuration")])])])],-1),_=e("h2",{id:"cache"},[o("Cache "),e("a",{class:"header-anchor",href:"#cache"},"#")],-1),p=e("p",null,"Directus has a built-in way to do data-caching. Enabling this will cache the output of the request (based on the current user and exact query parameters used) into to configured cache storage location. This will drastically improve API performance, as subsequent requests are served straight from this cache. Enabling cache will also make Directus return accurate cache-control headers. Depending on your setup, this will further improve performance by caching the request in middleman servers (like CDNs) and even the browser.",-1),f=e("p",null,[o("You can enable the data-cache with the "),e("code",null,"CACHE_ENABLED"),o(" environment variable.")],-1),g=e("h3",{id:"cache-store"},[o("Cache Store "),e("a",{class:"header-anchor",href:"#cache-store"},"#")],-1),m=e("p",null,[o("In bigger projects, you most likely don\u2019t want to rely on local memory to keep the caches. Instead, you can use the "),e("code",null,"CACHE_STORE"),o(" environment variable to tell Directus to use either "),e("code",null,"memcache"),o(" or "),e("code",null,"redis"),o(" to store the caches.")],-1),T=e("pre",null,[e("code",null,`CACHE_ENABLED="true"

CACHE_STORE="redis"
CACHE_REDIS="redis://@127.0.0.1"
`)],-1),E=e("h3",{id:"auto-purging"},[o("Auto-Purging "),e("a",{class:"header-anchor",href:"#auto-purging"},"#")],-1),A=e("p",null,"Directus can automatically clear the caches whenever a create/update/delete action is performed. This allows you to keep the Directus API real-time, while still getting the performance benefits on quick subsequent reads.",-1),O=e("pre",null,[e("code",null,`CACHE_AUTO_PURGE="true"
`)],-1),S=e("h3",{id:"ttl"},[o("TTL "),e("a",{class:"header-anchor",href:"#ttl"},"#")],-1),R=e("p",null,[o("Based on your project\u2019s needs, you might be able to aggressively cache your data, only requiring new data to be fetched every hour or so. This allows you to squeeze the most performance out of your Directus instance. This can be incredibly useful for applications where you have a lot of (public) read-access and where updates aren\u2019t real-time (for example a website). "),e("code",null,"CACHE_TTL"),o(" uses "),e("a",{href:"https://www.npmjs.com/package/ms",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"ms")]),o(" to parse the value, so you configure it using human readable values (like "),e("code",null,"2 days"),o(", "),e("code",null,"7 hrs"),o(", "),e("code",null,"5m"),o(").")],-1),y=e("pre",null,[e("code",null,`CACHE_TTL="1h"
`)],-1),b=e("h3",{id:"assets"},[o("Assets "),e("a",{class:"header-anchor",href:"#assets"},"#")],-1),v=e("p",null,"The cache-control header for the /assets endpoint is separate from the regular data-cache. This is useful as it\u2019s often possible to cache assets for way longer than you would with the actual content.",-1),C=e("pre",null,[e("code",null,`ASSETS_CACHE_TTL="7d"
`)],-1),I=e("h2",{id:"oauth-(single-sign-on-(sso)-%2F-openid)"},[o("oAuth (Single Sign-On (SSO) / OpenID) "),e("a",{class:"header-anchor",href:"#oauth-(single-sign-on-(sso)-%2F-openid)"},"#")],-1),w=e("p",null,"Directus\u2019 oAuth integration provides a powerful alternative way to authenticate into your project. Directus will ask you to login on the external service, and if your user exists in Directus, you\u2019ll be logged in automatically.",-1),L=e("p",null,[o("Directus relies on "),e("a",{href:"https://www.npmjs.com/package/grant",target:"_blank",rel:"noopener noreferrer"},[e("code",null,"grant")]),o(" for the handling of the oAuth flow. This means that there\u2019s hundreds of services that are supported out of the box. For example, enabling logging in through GitHub is as easy as creating an "),e("a",{href:"https://github.com/settings/developers",target:"_blank",rel:"noopener noreferrer"},"oAuth app in GitHub"),o(" and adding the following to Directus:")],-1),D=e("pre",null,[e("code",null,`OAUTH_PROVIDERS="github"
OAUTH_GITHUB_KEY="99d3...c3c4"
OAUTH_GITHUB_SECRET="34ae...f963"
`)],-1),k=e("div",{class:"warning hint"},[e("div",{class:"hint-title"},"PUBLIC_URL"),e("p",null,[o("The oAuth flow relies on the "),e("code",null,"PUBLIC_URL"),o(" variable for it\u2019s redirecting. Make sure that variable is configured correctly.")])],-1),U=e("h4",{id:"multiple-providers"},[o("Multiple Providers "),e("a",{class:"header-anchor",href:"#multiple-providers"},"#")],-1),G=e("p",null,[e("code",null,"OAUTH_PROVIDERS"),o(" accepts a CSV of providers, allowing you to specify multiple at the same time:")],-1),H=e("pre",null,[e("code",null,`OAUTH_PROVIDERS ="google,microsoft"

OAUTH_GOOGLE_KEY = "<google_application_id>"
OAUTH_GOOGLE_SECRET=  "<google_application_secret_key>"
OAUTH_GOOGLE_SCOPE="openid email"

OAUTH_MICROSOFT_KEY = "<microsoft_application_id>"
OAUTH_MICROSOFT_SECRET = "<microsoft_application_secret_key>"
OAUTH_MICROSOFT_SCOPE = "openid email"
OAUTH_MICROSOFT_AUTHORIZE_URL = "https://login.microsoftonline.com/<microsoft_application_id>/oauth2/v2.0/authorize"
OAUTH_MICROSOFT_ACCESS_URL = "https://login.microsoftonline.com/<microsoft_application_id>/oauth2/v2.0/token"

PUBLIC_URL = "<public_url_of_directus_instance>"
`)],-1),P=e("h3",{id:"provider-specific-configuration"},[o("Provider Specific Configuration "),e("a",{class:"header-anchor",href:"#provider-specific-configuration"},"#")],-1),B=e("p",null,[o("If you use one of the many supported providers, you often don\u2019t have to configure any more than just the key and secret for the service. That being said, if you use a more tailored service (like the specific Microsoft application in the example above), you might have to provide more configuration values yourself. Please see "),e("a",{href:"https://github.com/simov/grant#configuration-description",target:"_blank",rel:"noopener noreferrer"},"https://github.com/simov/grant#configuration-description"),o(" for a list of all available configuration flags.")],-1),M=e("h2",{id:"file-storage"},[o("File Storage "),e("a",{class:"header-anchor",href:"#file-storage"},"#")],-1),N=e("p",null,"By default, Directus stores every file you upload locally on disk. Instead of local file storage, you can configure Directus to use S3 or Google Cloud Storage instead:",-1),F=e("pre",null,[e("code",null,`STORAGE_LOCATIONS="aws"

STORAGE_AWS_DRIVER="s3"
STORAGE_AWS_KEY="tp15c...510vk"
STORAGE_AWS_SECRET="yk29b...b932n"
STORAGE_AWS_REGION="us-east-2"
STORAGE_AWS_BUCKET="my-files"
`)],-1),x=e("h3",{id:"multiple-storage-adapters"},[o("Multiple Storage Adapters "),e("a",{class:"header-anchor",href:"#multiple-storage-adapters"},"#")],-1),q=e("p",null,"You can configure multiple storage adapters at the same time. This allows you to choose where files are being uploaded on a file-by-file basis. To do this, you can provide a CSV of storage location names, and provide a config block for each of them:",-1),W=e("pre",null,[e("code",null,`STORAGE_LOCATIONS="local,aws"

STORAGE_LOCAL_DRIVER="local"
STORAGE_LOCAL_ROOT="local"

STORAGE_AWS_KEY="tp15c...510vk"
STORAGE_AWS_SECRET="yk29b...b932n"
STORAGE_AWS_REGION="us-east-2"
STORAGE_AWS_BUCKET="my-files"
`)],-1),V=e("p",null,[o("In the Admin App, files will automatically be uploaded to the first configured storage location (in this case "),e("code",null,"local"),o("). The used storage location is saved under "),e("code",null,"storage"),o(" in "),e("code",null,"directus_files"),o(".")],-1),Y=e("h2",{id:"rate-limiting"},[o("Rate Limiting "),e("a",{class:"header-anchor",href:"#rate-limiting"},"#")],-1),j=e("p",null,"You can use the built-in rate-limiter to prevent users from hitting the API too much. To enable the rate-limiter, simply set",-1),K=e("pre",null,[e("code",null,`RATE_LIMITER_ENABLED="true"
`)],-1),z=e("p",null,"This will kick-in the rate-limiter on a maximum of 50 requests a second. You can configure this using:",-1),Z=e("pre",null,[e("code",null,`// 10 requests per 5 seconds

RATE_LIMITER_POINTS="10"
RATE_LIMITER_DURATION="5"
`)],-1),J=e("p",null,[o("Once you have multiple copies of Directus running under a load-balancer, or your user base grows so much that memory is no longer a viable place to store the rate limiter information, you can use an external "),e("code",null,"memcache"),o(" or "),e("code",null,"redis"),o(" instance to store the rate limiter data:")],-1),Q=e("pre",null,[e("code",null,`RATE_LIMITER_ENABLED="true"

RATE_LIMITER_POINTS="10"
RATE_LIMITER_DURATION="5"

RATE_LIMITER_STORE="redis"

RATE_LIMITER_REDIS="redis://@127.0.0.1"
`)],-1),X=e("h2",{id:"file-based-configuration"},[o("File-Based Configuration "),e("a",{class:"header-anchor",href:"#file-based-configuration"},"#")],-1),$=o("In case you prefer using a configuration file instead of environment variables, you can use the "),ee=e("code",null,"CONFIG_PATH",-1),oe=o(" environment variable to instruct Directus to use a local configuration file instead of environment variables. See "),te=o("Config Files"),ne=o(" for more information."),le={setup(ie,{expose:s}){const t={title:"Configuring the API",modularExtension:!1};return s({frontmatter:t}),(se,ae)=>{const a=n("router-link"),r=n("DocsWrapper");return l(),c(r,{frontmatter:t},{default:i(()=>[e("div",h,[d,_,p,f,g,m,T,E,A,O,S,R,y,b,v,C,I,w,L,D,k,U,G,H,P,B,M,N,F,x,q,W,V,Y,j,K,z,Z,J,Q,X,e("p",null,[$,ee,oe,u(a,{to:"/docs/reference/config-files.md"},{default:i(()=>[te]),_:1}),ne])])]),_:1})}}};export{le as default};
