import{r as n,p as r,q as d,w as s,B as e,t as u,P as t}from"./vendor.62143b15.js";const c={class:"markdown-body"},h=e("blockquote",null,[e("p",null,"Every Field is configured with a specific \u201CType\u201D which defines how its data is stored in the database. Often called a data-type, these are important in ensuring field values are saved cleanly and in a standardized format.")],-1),p=e("p",null,"When creating a new field you\u2019ll be asked to choose a specific data-type. It\u2019s important to understand their purpose, because changing them later can cause massive data loss. For that reason, once you set a field\u2019s type, it can\u2019t be changed from within Directus.",-1),f=e("p",null,[t("The Type dictates the specific format of a field\u2019s "),e("em",null,"value"),t(" when saving it to the database, helping to keep your data clean, standardized and valid. The type also tells the Directus API how to return your data, for example the "),e("code",null,"CSV"),t(" type is returned as an array of strings.")],-1),m=e("h4",{id:"relevant-guides"},[t("Relevant Guides "),e("a",{class:"header-anchor",href:"#relevant-guides"},"#")],-1),g=t("Creating a Field"),v=e("h2",{id:"directus-data-type-superset"},[t("Directus Data Type Superset "),e("a",{class:"header-anchor",href:"#directus-data-type-superset"},"#")],-1),_=e("p",null,[t("Directus uses its built-in database abstraction to properly support all the different SQL vendors. However, these vendors do not share support for the same datatypes, instead, each SQL vendor maintains their own list. To standardize all of these differences, Directus has a single "),e("em",null,"superset"),t(" of types that map to the vendor-specific ones.")],-1),y=e("ul",null,[e("li",null,[e("strong",null,"String"),t(" \u2014 A shorter set of characters with a configurable max length")]),e("li",null,[e("strong",null,"Text"),t(" \u2014 A longer set of characters with no real-world max length")]),e("li",null,[e("strong",null,"Boolean"),t(" \u2014 A True or False value")]),e("li",null,[e("strong",null,"Binary"),t(" \u2014 The data of a binary file")]),e("li",null,[e("strong",null,"Integer"),t(" \u2014 A number without a decimal point")]),e("li",null,[e("strong",null,"Big Integer"),t(" \u2014 A larger number without a decimal point")]),e("li",null,[e("strong",null,"Float"),t(" \u2014 A less exact number with a floating decimal point")]),e("li",null,[e("strong",null,"Decimal"),t(" \u2014 A higher precision, exact decimal number often used in finances")]),e("li",null,[e("strong",null,"Timestamp"),t(" \u2014 A date, time, and timezone saved in ISO 8601 format")]),e("li",null,[e("strong",null,"DateTime"),t(" \u2014 A date and time saved in the database vendor\u2019s format")]),e("li",null,[e("strong",null,"Date"),t(" \u2014 A date saved in the database vendor\u2019s format")]),e("li",null,[e("strong",null,"Time"),t(" \u2014 A time saved in the database vendor\u2019s format")]),e("li",null,[e("strong",null,"JSON"),t(" \u2014 A value nested in JavaScript Object Notation")]),e("li",null,[e("strong",null,"CSV"),t(" \u2014 A comma-separated value, returned as an array of strings")]),e("li",null,[e("strong",null,"UUID"),t(" \u2014 A universally unique identifier saved in UUIDv4 format")]),e("li",null,[e("strong",null,"Hash"),t(" \u2014 A string hashed using argon2 cryptographic hash algorithm")])],-1),b=e("div",{class:"tip hint"},[e("div",{class:"hint-title"},"Aliases"),e("p",null,[t("There is also an "),e("strong",null,"Alias"),t(" type that is used for all fields that do not have a corresponding database column. This includes presentation-only fields, and certain relational fields, such as the One-to-Many.")])],-1),x={setup(w,{expose:l}){const a={title:"Types",modularExtension:!1};return l({frontmatter:a}),(A,T)=>{const i=n("router-link"),o=n("DocsWrapper");return r(),d(o,{frontmatter:a},{default:s(()=>[e("div",c,[h,p,f,m,e("ul",null,[e("li",null,[u(i,{to:"/docs/guides/fields/#creating-a-field"},{default:s(()=>[g]),_:1})])]),v,_,y,b])]),_:1})}}};export{x as default};
