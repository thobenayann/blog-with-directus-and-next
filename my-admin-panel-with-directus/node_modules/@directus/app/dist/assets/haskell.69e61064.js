import{bA as W}from"./vendor.62143b15.js";function I(u,p){return p.forEach(function(a){Object.keys(a).forEach(function(o){if(o!=="default"&&!(o in u)){var m=Object.getOwnPropertyDescriptor(a,o);Object.defineProperty(u,o,m.get?m:{enumerable:!0,get:function(){return a[o]}})}})}),Object.freeze(u)}var x={exports:{}};(function(u,p){(function(a){a(W.exports)})(function(a){a.defineMode("haskell",function(o,m){function d(e,r,t){return r(t),t(e,r)}var E=/[a-z_]/,F=/[A-Z]/,s=/\d/,R=/[0-9A-Fa-f]/,y=/[0-7]/,c=/[a-z_A-Z0-9'\xa1-\uffff]/,h=/[-!#$%&*+.\/<=>?@\\^|~:]/,k=/[(),;[\]`{}]/,g=/[ \t\v\f]/;function l(e,r){if(e.eatWhile(g))return null;var t=e.next();if(k.test(t)){if(t=="{"&&e.eat("-")){var n="comment";return e.eat("#")&&(n="meta"),d(e,r,v(n,1))}return null}if(t=="'")return e.eat("\\"),e.next(),e.eat("'")?"string":"string error";if(t=='"')return d(e,r,b);if(F.test(t))return e.eatWhile(c),e.eat(".")?"qualifier":"variable-2";if(E.test(t))return e.eatWhile(c),"variable";if(s.test(t)){if(t=="0"){if(e.eat(/[xX]/))return e.eatWhile(R),"integer";if(e.eat(/[oO]/))return e.eatWhile(y),"number"}e.eatWhile(s);var n="number";return e.match(/^\.\d+/)&&(n="number"),e.eat(/[eE]/)&&(n="number",e.eat(/[-+]/),e.eatWhile(s)),n}if(t=="."&&e.eat("."))return"keyword";if(h.test(t)){if(t=="-"&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(h)))return e.skipToEnd(),"comment";var n="variable";return t==":"&&(n="variable-2"),e.eatWhile(h),n}return"error"}function v(e,r){return r==0?l:function(t,n){for(var i=r;!t.eol();){var f=t.next();if(f=="{"&&t.eat("-"))++i;else if(f=="-"&&t.eat("}")&&(--i,i==0))return n(l),e}return n(v(e,i)),e}}function b(e,r){for(;!e.eol();){var t=e.next();if(t=='"')return r(l),"string";if(t=="\\"){if(e.eol()||e.eat(g))return r(O),"string";e.eat("&")||e.next()}}return r(l),"string error"}function O(e,r){return e.eat("\\")?d(e,r,b):(e.next(),r(l),"error")}var w=function(){var e={};function r(i){return function(){for(var f=0;f<arguments.length;f++)e[arguments[f]]=i}}r("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),r("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),r("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<*","<=","<$>","<*>","=<<","==",">",">=",">>",">>=","^","^^","||","*","*>","**"),r("builtin")("Applicative","Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),r("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","pure","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var t=m.overrideKeywords;if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}();return{startState:function(){return{f:l}},copyState:function(e){return{f:e.f}},token:function(e,r){var t=r.f(e,function(i){r.f=i}),n=e.current();return w.hasOwnProperty(n)?w[n]:t},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),a.defineMIME("text/x-haskell","haskell")})})();var T=x.exports,_=Object.freeze(I({__proto__:null,[Symbol.toStringTag]:"Module",default:T},[x.exports]));export{x as a,_ as h};
