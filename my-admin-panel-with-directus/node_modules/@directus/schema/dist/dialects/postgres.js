"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var postgres_1 = __importStar(require("knex-schema-inspector/dist/dialects/postgres"));
var Postgres = /** @class */ (function (_super) {
    __extends(Postgres, _super);
    function Postgres() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Postgres.prototype.overview = function () {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var _e, columnsResult, primaryKeysResult, columns, primaryKeys, geometryColumns, hasPostGIS, result, overview, _i, columns_1, column, _f, primaryKeys_1, _g, table_name, column_name, _h, geometryColumns_1, _j, table_name, column_name, data_type;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        return [4 /*yield*/, Promise.all([
                                // Only select columns from BASE TABLEs to exclude views (Postgres views
                                // cannot have primary keys so they cannot be used)
                                this.knex.raw("\n        SELECT c.table_name\n          , c.column_name\n          , c.column_default as default_value\n          , c.data_type\n\t\t\t \t\t, c.character_maximum_length as max_length\n          , CASE WHEN c.is_identity = 'YES' THEN true ELSE false END is_identity\n          , CASE WHEN c.is_nullable = 'YES' THEN true ELSE false END is_nullable\n        FROM\n          information_schema.columns c\n        LEFT JOIN information_schema.tables t\n          ON c.table_name = t.table_name\n        WHERE\n          t.table_type = 'BASE TABLE'\n          AND c.table_schema IN (?);\n      ", [this.explodedSchema.join(',')]),
                                this.knex.raw("\n        SELECT relname as table_name\n          , pg_attribute.attname as column_name\n        FROM pg_index\n          , pg_class\n          , pg_attribute\n          , pg_namespace\n        WHERE\n          indrelid = pg_class.oid\n          AND nspname IN (?)\n          AND pg_class.relnamespace = pg_namespace.oid\n          AND pg_attribute.attrelid = pg_class.oid\n          AND pg_attribute.attnum = ANY (pg_index.indkey)\n          AND indisprimary\n      ", [this.explodedSchema.join(',')]),
                            ])];
                    case 1:
                        _e = _k.sent(), columnsResult = _e[0], primaryKeysResult = _e[1];
                        columns = columnsResult.rows;
                        primaryKeys = primaryKeysResult.rows;
                        geometryColumns = [];
                        return [4 /*yield*/, this.knex.raw("SELECT EXISTS (\n\t\t\t\tSELECT\n\t\t\t\tFROM\n\t\t\t\t\tpg_proc p\n\t\t\t\t\tJOIN pg_namespace n ON p.pronamespace = n.oid\n\t\t\t\tWHERE\n\t\t\t\t\tn.nspname IN(?)\n\t\t\t\t\tAND p.oid::regprocedure::varchar = 'postgis_version()'\n\t\t\t);", [this.explodedSchema.join(',')])];
                    case 2:
                        hasPostGIS = (_c = (_b = (_a = (_k.sent())) === null || _a === void 0 ? void 0 : _a.rows) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.exists;
                        if (!hasPostGIS) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.knex.raw("WITH geometries as (\n\t\t\t\t\tselect * from geometry_columns\n\t\t\t\t\tunion\n\t\t\t\t\tselect * from geography_columns\n\t\t\t\t)\n\t\t\t\tSELECT f_table_name as table_name\n\t\t\t\t\t, f_geometry_column as column_name\n\t\t\t\t\t, type as data_type\n\t\t\t\tFROM geometries g\n\t\t\t\tJOIN information_schema.tables t\n\t\t\t\t\tON g.f_table_name = t.table_name\n\t\t\t\t\tAND t.table_type = 'BASE TABLE'\n\t\t\t\tWHERE f_table_schema in (?)\n\t\t\t\t", [this.explodedSchema.join(',')])];
                    case 3:
                        result = _k.sent();
                        geometryColumns = result.rows;
                        _k.label = 4;
                    case 4:
                        overview = {};
                        for (_i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                            column = columns_1[_i];
                            if (column.is_identity || ((_d = column.default_value) === null || _d === void 0 ? void 0 : _d.startsWith('nextval('))) {
                                column.default_value = 'AUTO_INCREMENT';
                            }
                            else {
                                column.default_value = (0, postgres_1.parseDefaultValue)(column.default_value);
                            }
                            if (column.table_name in overview === false) {
                                overview[column.table_name] = { columns: {}, primary: undefined };
                            }
                            overview[column.table_name].columns[column.column_name] = column;
                        }
                        for (_f = 0, primaryKeys_1 = primaryKeys; _f < primaryKeys_1.length; _f++) {
                            _g = primaryKeys_1[_f], table_name = _g.table_name, column_name = _g.column_name;
                            overview[table_name].primary = column_name;
                        }
                        for (_h = 0, geometryColumns_1 = geometryColumns; _h < geometryColumns_1.length; _h++) {
                            _j = geometryColumns_1[_h], table_name = _j.table_name, column_name = _j.column_name, data_type = _j.data_type;
                            overview[table_name].columns[column_name].data_type = data_type;
                        }
                        return [2 /*return*/, overview];
                }
            });
        });
    };
    Postgres.prototype.columnInfo = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var columns, _a, query, geometry, geometries, _loop_1, _i, columns_2, column_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, _super.prototype.columnInfo.call(this, table, column)];
                    case 1:
                        columns = _b.sent();
                        if (!(columns === null || columns === void 0 ? void 0 : columns.length)) {
                            return [2 /*return*/, columns];
                        }
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.knex.raw('select postgis_version()')];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a = _b.sent();
                        return [2 /*return*/, columns];
                    case 5:
                        query = this.knex
                            .with('geometries', this.knex.raw("\n\t\t\t\tselect * from geometry_columns\n\t\t\t\tunion\n\t\t\t\tselect * from geography_columns\n\t\t"))
                            .select({
                            table: 'f_table_name',
                            name: 'f_geometry_column',
                            data_type: 'type',
                        })
                            .from('geometries')
                            .whereIn('f_table_schema', this.explodedSchema);
                        if (table) {
                            query.andWhere('f_table_name', table);
                        }
                        if (!column) return [3 /*break*/, 7];
                        if (['point', 'polygon'].includes(columns.data_type)) {
                            columns.data_type = 'unknown';
                        }
                        return [4 /*yield*/, query.andWhere('f_geometry_column', column).first()];
                    case 6:
                        geometry = _b.sent();
                        if (geometry) {
                            columns.data_type = geometry.data_type;
                        }
                        _b.label = 7;
                    case 7: return [4 /*yield*/, query];
                    case 8:
                        geometries = _b.sent();
                        _loop_1 = function (column_1) {
                            if (['point', 'polygon'].includes(column_1.data_type)) {
                                column_1.data_type = 'unknown';
                            }
                            var geometry = geometries.find(function (geometry) {
                                return column_1.name == geometry.name && column_1.table == geometry.table;
                            });
                            if (geometry) {
                                column_1.data_type = geometry.data_type;
                            }
                        };
                        for (_i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
                            column_1 = columns_2[_i];
                            _loop_1(column_1);
                        }
                        return [2 /*return*/, columns];
                }
            });
        });
    };
    return Postgres;
}(postgres_1.default));
exports.default = Postgres;
