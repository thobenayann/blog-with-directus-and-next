"use strict";

const util = require('util');

module.exports.ConnectionError = ConnectionError;

function ConnectionError(message, code) {
  if (!(this instanceof ConnectionError)) {
    emitConnectionErrorWithoutNewWarning();

    if (message instanceof ConnectionError) {
      return message;
    }

    return new ConnectionError(message, code);
  }

  Error.call(this);
  this.message = message;
  this.code = code;
  Error.captureStackTrace(this, this.constructor);
}

util.inherits(ConnectionError, Error);
ConnectionError.prototype.name = 'ConnectionError';
module.exports.RequestError = RequestError;

function RequestError(message, code) {
  if (!(this instanceof RequestError)) {
    emitRequestErrorWithoutNewWarning();

    if (message instanceof RequestError) {
      return message;
    }

    return new RequestError(message, code);
  }

  Error.call(this);
  this.message = message;
  this.code = code;
  Error.captureStackTrace(this, this.constructor);
}

util.inherits(RequestError, Error);
RequestError.prototype.name = 'RequestError';
let connectionErrorWithoutNewWarningEmitted = false;

function emitConnectionErrorWithoutNewWarning() {
  if (connectionErrorWithoutNewWarningEmitted) {
    return;
  }

  connectionErrorWithoutNewWarningEmitted = true;
  process.emitWarning('Calling the `ConnectionError` constructor function without new is deprecated ' + 'and will throw an error in a future release of `tedious`.', 'DeprecationWarning', ConnectionError);
}

let requestErrorWithoutNewWarningEmitted = false;

function emitRequestErrorWithoutNewWarning() {
  if (requestErrorWithoutNewWarningEmitted) {
    return;
  }

  requestErrorWithoutNewWarningEmitted = true;
  process.emitWarning('Calling the `RequestError` constructor function without new is deprecated ' + 'and will throw an error in a future release of `tedious`.', 'DeprecationWarning', RequestError);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lcnJvcnMuanMiXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ29ubmVjdGlvbkVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJlbWl0Q29ubmVjdGlvbkVycm9yV2l0aG91dE5ld1dhcm5pbmciLCJFcnJvciIsImNhbGwiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImNvbnN0cnVjdG9yIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJuYW1lIiwiUmVxdWVzdEVycm9yIiwiZW1pdFJlcXVlc3RFcnJvcldpdGhvdXROZXdXYXJuaW5nIiwiY29ubmVjdGlvbkVycm9yV2l0aG91dE5ld1dhcm5pbmdFbWl0dGVkIiwicHJvY2VzcyIsImVtaXRXYXJuaW5nIiwicmVxdWVzdEVycm9yV2l0aG91dE5ld1dhcm5pbmdFbWl0dGVkIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxlQUFmLEdBQWlDQSxlQUFqQzs7QUFDQSxTQUFTQSxlQUFULENBQXlCQyxPQUF6QixFQUFrQ0MsSUFBbEMsRUFBd0M7QUFDdEMsTUFBSSxFQUFFLGdCQUFnQkYsZUFBbEIsQ0FBSixFQUF3QztBQUN0Q0csSUFBQUEsb0NBQW9DOztBQUVwQyxRQUFJRixPQUFPLFlBQVlELGVBQXZCLEVBQXdDO0FBQ3RDLGFBQU9DLE9BQVA7QUFDRDs7QUFFRCxXQUFPLElBQUlELGVBQUosQ0FBb0JDLE9BQXBCLEVBQTZCQyxJQUE3QixDQUFQO0FBQ0Q7O0FBRURFLEVBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXLElBQVg7QUFFQSxPQUFLSixPQUFMLEdBQWVBLE9BQWY7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFFQUUsRUFBQUEsS0FBSyxDQUFDRSxpQkFBTixDQUF3QixJQUF4QixFQUE4QixLQUFLQyxXQUFuQztBQUNEOztBQUVEWCxJQUFJLENBQUNZLFFBQUwsQ0FBY1IsZUFBZCxFQUErQkksS0FBL0I7QUFFQUosZUFBZSxDQUFDUyxTQUFoQixDQUEwQkMsSUFBMUIsR0FBaUMsaUJBQWpDO0FBRUFaLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlWSxZQUFmLEdBQThCQSxZQUE5Qjs7QUFDQSxTQUFTQSxZQUFULENBQXNCVixPQUF0QixFQUErQkMsSUFBL0IsRUFBcUM7QUFDbkMsTUFBSSxFQUFFLGdCQUFnQlMsWUFBbEIsQ0FBSixFQUFxQztBQUNuQ0MsSUFBQUEsaUNBQWlDOztBQUVqQyxRQUFJWCxPQUFPLFlBQVlVLFlBQXZCLEVBQXFDO0FBQ25DLGFBQU9WLE9BQVA7QUFDRDs7QUFFRCxXQUFPLElBQUlVLFlBQUosQ0FBaUJWLE9BQWpCLEVBQTBCQyxJQUExQixDQUFQO0FBQ0Q7O0FBRURFLEVBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXLElBQVg7QUFFQSxPQUFLSixPQUFMLEdBQWVBLE9BQWY7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFFQUUsRUFBQUEsS0FBSyxDQUFDRSxpQkFBTixDQUF3QixJQUF4QixFQUE4QixLQUFLQyxXQUFuQztBQUNEOztBQUVEWCxJQUFJLENBQUNZLFFBQUwsQ0FBY0csWUFBZCxFQUE0QlAsS0FBNUI7QUFFQU8sWUFBWSxDQUFDRixTQUFiLENBQXVCQyxJQUF2QixHQUE4QixjQUE5QjtBQUVBLElBQUlHLHVDQUF1QyxHQUFHLEtBQTlDOztBQUNBLFNBQVNWLG9DQUFULEdBQWdEO0FBQzlDLE1BQUlVLHVDQUFKLEVBQTZDO0FBQzNDO0FBQ0Q7O0FBRURBLEVBQUFBLHVDQUF1QyxHQUFHLElBQTFDO0FBRUFDLEVBQUFBLE9BQU8sQ0FBQ0MsV0FBUixDQUNFLGtGQUNBLDJEQUZGLEVBR0Usb0JBSEYsRUFJRWYsZUFKRjtBQU1EOztBQUVELElBQUlnQixvQ0FBb0MsR0FBRyxLQUEzQzs7QUFDQSxTQUFTSixpQ0FBVCxHQUE2QztBQUMzQyxNQUFJSSxvQ0FBSixFQUEwQztBQUN4QztBQUNEOztBQUVEQSxFQUFBQSxvQ0FBb0MsR0FBRyxJQUF2QztBQUVBRixFQUFBQSxPQUFPLENBQUNDLFdBQVIsQ0FDRSwrRUFDQSwyREFGRixFQUdFLG9CQUhGLEVBSUVKLFlBSkY7QUFNRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IENvbm5lY3Rpb25FcnJvcjtcbmZ1bmN0aW9uIENvbm5lY3Rpb25FcnJvcihtZXNzYWdlLCBjb2RlKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb25uZWN0aW9uRXJyb3IpKSB7XG4gICAgZW1pdENvbm5lY3Rpb25FcnJvcldpdGhvdXROZXdXYXJuaW5nKCk7XG5cbiAgICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIENvbm5lY3Rpb25FcnJvcikge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb25uZWN0aW9uRXJyb3IobWVzc2FnZSwgY29kZSk7XG4gIH1cblxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMuY29kZSA9IGNvZGU7XG5cbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG59XG5cbnV0aWwuaW5oZXJpdHMoQ29ubmVjdGlvbkVycm9yLCBFcnJvcik7XG5cbkNvbm5lY3Rpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdDb25uZWN0aW9uRXJyb3InO1xuXG5tb2R1bGUuZXhwb3J0cy5SZXF1ZXN0RXJyb3IgPSBSZXF1ZXN0RXJyb3I7XG5mdW5jdGlvbiBSZXF1ZXN0RXJyb3IobWVzc2FnZSwgY29kZSkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdEVycm9yKSkge1xuICAgIGVtaXRSZXF1ZXN0RXJyb3JXaXRob3V0TmV3V2FybmluZygpO1xuXG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBSZXF1ZXN0RXJyb3IpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVxdWVzdEVycm9yKG1lc3NhZ2UsIGNvZGUpO1xuICB9XG5cbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLmNvZGUgPSBjb2RlO1xuXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xufVxuXG51dGlsLmluaGVyaXRzKFJlcXVlc3RFcnJvciwgRXJyb3IpO1xuXG5SZXF1ZXN0RXJyb3IucHJvdG90eXBlLm5hbWUgPSAnUmVxdWVzdEVycm9yJztcblxubGV0IGNvbm5lY3Rpb25FcnJvcldpdGhvdXROZXdXYXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdENvbm5lY3Rpb25FcnJvcldpdGhvdXROZXdXYXJuaW5nKCkge1xuICBpZiAoY29ubmVjdGlvbkVycm9yV2l0aG91dE5ld1dhcm5pbmdFbWl0dGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29ubmVjdGlvbkVycm9yV2l0aG91dE5ld1dhcm5pbmdFbWl0dGVkID0gdHJ1ZTtcblxuICBwcm9jZXNzLmVtaXRXYXJuaW5nKFxuICAgICdDYWxsaW5nIHRoZSBgQ29ubmVjdGlvbkVycm9yYCBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRob3V0IG5ldyBpcyBkZXByZWNhdGVkICcgK1xuICAgICdhbmQgd2lsbCB0aHJvdyBhbiBlcnJvciBpbiBhIGZ1dHVyZSByZWxlYXNlIG9mIGB0ZWRpb3VzYC4nLFxuICAgICdEZXByZWNhdGlvbldhcm5pbmcnLFxuICAgIENvbm5lY3Rpb25FcnJvclxuICApO1xufVxuXG5sZXQgcmVxdWVzdEVycm9yV2l0aG91dE5ld1dhcm5pbmdFbWl0dGVkID0gZmFsc2U7XG5mdW5jdGlvbiBlbWl0UmVxdWVzdEVycm9yV2l0aG91dE5ld1dhcm5pbmcoKSB7XG4gIGlmIChyZXF1ZXN0RXJyb3JXaXRob3V0TmV3V2FybmluZ0VtaXR0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXF1ZXN0RXJyb3JXaXRob3V0TmV3V2FybmluZ0VtaXR0ZWQgPSB0cnVlO1xuXG4gIHByb2Nlc3MuZW1pdFdhcm5pbmcoXG4gICAgJ0NhbGxpbmcgdGhlIGBSZXF1ZXN0RXJyb3JgIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGhvdXQgbmV3IGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgJ2FuZCB3aWxsIHRocm93IGFuIGVycm9yIGluIGEgZnV0dXJlIHJlbGVhc2Ugb2YgYHRlZGlvdXNgLicsXG4gICAgJ0RlcHJlY2F0aW9uV2FybmluZycsXG4gICAgUmVxdWVzdEVycm9yXG4gICk7XG59XG4iXX0=