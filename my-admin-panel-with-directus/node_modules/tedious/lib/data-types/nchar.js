"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const NULL_LENGTH = Buffer.from([0xFF, 0xFF]);
const NChar = {
  id: 0xEF,
  type: 'NCHAR',
  name: 'NChar',
  maximumLength: 4000,
  declaration: function (parameter) {
    // const value = parameter.value as null | string | { toString(): string };
    const value = parameter.value; // Temporary solution. Remove 'any' later.

    let length;

    if (parameter.length) {
      length = parameter.length;
    } else if (parameter.value != null) {
      length = value.toString().length || 1;
    } else if (parameter.value === null && !parameter.output) {
      length = 1;
    } else {
      length = this.maximumLength;
    }

    if (length < this.maximumLength) {
      return 'nchar(' + length + ')';
    } else {
      return 'nchar(' + this.maximumLength + ')';
    }
  },
  resolveLength: function (parameter) {
    // const value = parameter.value as null | string | { toString(): string };
    const value = parameter.value; // Temporary solution. Remove 'any' later.

    if (parameter.length != null) {
      return parameter.length;
    } else if (parameter.value != null) {
      if (Buffer.isBuffer(parameter.value)) {
        return parameter.value.length / 2 || 1;
      } else {
        return value.toString().length || 1;
      }
    } else {
      return this.maximumLength;
    }
  },
  generateTypeInfo: function (parameter) {
    const buffer = Buffer.alloc(8);
    buffer.writeUInt8(this.id, 0);
    buffer.writeUInt16LE(parameter.length * 2, 1);

    if (parameter.collation) {
      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);
    }

    return buffer;
  },

  generateParameterLength(parameter, options) {
    if (parameter.value == null) {
      return NULL_LENGTH;
    }

    const {
      value
    } = parameter;

    if (value instanceof Buffer) {
      const length = value.length;
      const buffer = Buffer.alloc(2);
      buffer.writeUInt16LE(length, 0);
      return buffer;
    } else {
      const length = Buffer.byteLength(value.toString(), 'ucs2');
      const buffer = Buffer.alloc(2);
      buffer.writeUInt16LE(length, 0);
      return buffer;
    }
  },

  *generateParameterData(parameter, options) {
    if (parameter.value == null) {
      return;
    }

    const value = parameter.value;

    if (value instanceof Buffer) {
      yield value;
    } else {
      yield Buffer.from(value, 'ucs2');
    }
  },

  validate: function (value) {
    if (value == null) {
      return null;
    }

    if (typeof value !== 'string') {
      if (typeof value.toString !== 'function') {
        throw new TypeError('Invalid string.');
      }

      emitTypeCoercionWarning();
      value = value.toString();
    }

    return value;
  }
};
var _default = NChar;
exports.default = _default;
module.exports = NChar;
let typeCoercionWarningEmitted = false;

function emitTypeCoercionWarning() {
  if (typeCoercionWarningEmitted) {
    return;
  }

  typeCoercionWarningEmitted = true;
  process.emitWarning('`nchar` type coercion from non-string type value via `.toString()` method is deprecated and will be removed.', 'DeprecationWarning', NChar.validate);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhLXR5cGVzL25jaGFyLnRzIl0sIm5hbWVzIjpbIk5VTExfTEVOR1RIIiwiQnVmZmVyIiwiZnJvbSIsIk5DaGFyIiwiaWQiLCJ0eXBlIiwibmFtZSIsIm1heGltdW1MZW5ndGgiLCJkZWNsYXJhdGlvbiIsInBhcmFtZXRlciIsInZhbHVlIiwibGVuZ3RoIiwidG9TdHJpbmciLCJvdXRwdXQiLCJyZXNvbHZlTGVuZ3RoIiwiaXNCdWZmZXIiLCJnZW5lcmF0ZVR5cGVJbmZvIiwiYnVmZmVyIiwiYWxsb2MiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsImNvbGxhdGlvbiIsInRvQnVmZmVyIiwiY29weSIsImdlbmVyYXRlUGFyYW1ldGVyTGVuZ3RoIiwib3B0aW9ucyIsImJ5dGVMZW5ndGgiLCJnZW5lcmF0ZVBhcmFtZXRlckRhdGEiLCJ2YWxpZGF0ZSIsIlR5cGVFcnJvciIsImVtaXRUeXBlQ29lcmNpb25XYXJuaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGVDb2VyY2lvbldhcm5pbmdFbWl0dGVkIiwicHJvY2VzcyIsImVtaXRXYXJuaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxNQUFNQSxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBWixDQUFwQjtBQUVBLE1BQU1DLEtBQTJDLEdBQUc7QUFDbERDLEVBQUFBLEVBQUUsRUFBRSxJQUQ4QztBQUVsREMsRUFBQUEsSUFBSSxFQUFFLE9BRjRDO0FBR2xEQyxFQUFBQSxJQUFJLEVBQUUsT0FINEM7QUFJbERDLEVBQUFBLGFBQWEsRUFBRSxJQUptQztBQU1sREMsRUFBQUEsV0FBVyxFQUFFLFVBQVNDLFNBQVQsRUFBb0I7QUFDL0I7QUFDQSxVQUFNQyxLQUFLLEdBQUdELFNBQVMsQ0FBQ0MsS0FBeEIsQ0FGK0IsQ0FFTzs7QUFFdEMsUUFBSUMsTUFBSjs7QUFDQSxRQUFJRixTQUFTLENBQUNFLE1BQWQsRUFBc0I7QUFD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QUosRUFBZ0M7QUFDOUI7QUFDRDs7QUFFREEsRUFBQUEsMEJBQTBCLEdBQUcsSUFBN0I7QUFFQUMsRUFBQUEsT0FBTyxDQUFDQyxXQUFSLENBQ0UsOEdBREYsRUFFRSxvQkFGRixFQUdFaEMsS0FBSyxDQUFDeUIsUUFIUjtBQUtEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi9kYXRhLXR5cGUnO1xuXG5jb25zdCBOVUxMX0xFTkdUSCA9IEJ1ZmZlci5mcm9tKFsweEZGLCAweEZGXSk7XG5cbmNvbnN0IE5DaGFyOiBEYXRhVHlwZSAmIHsgbWF4aW11bUxlbmd0aDogbnVtYmVyIH0gPSB7XG4gIGlkOiAweEVGLFxuICB0eXBlOiAnTkNIQVInLFxuICBuYW1lOiAnTkNoYXInLFxuICBtYXhpbXVtTGVuZ3RoOiA0MDAwLFxuXG4gIGRlY2xhcmF0aW9uOiBmdW5jdGlvbihwYXJhbWV0ZXIpIHtcbiAgICAvLyBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlci52YWx1ZSBhcyBudWxsIHwgc3RyaW5nIHwgeyB0b1N0cmluZygpOiBzdHJpbmcgfTtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlci52YWx1ZSBhcyBhbnk7IC8vIFRlbXBvcmFyeSBzb2x1dGlvbi4gUmVtb3ZlICdhbnknIGxhdGVyLlxuXG4gICAgbGV0IGxlbmd0aDtcbiAgICBpZiAocGFyYW1ldGVyLmxlbmd0aCkge1xuICAgICAgbGVuZ3RoID0gcGFyYW1ldGVyLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHBhcmFtZXRlci52YWx1ZSAhPSBudWxsKSB7XG4gICAgICBsZW5ndGggPSB2YWx1ZS50b1N0cmluZygpLmxlbmd0aCB8fCAxO1xuICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyLnZhbHVlID09PSBudWxsICYmICFwYXJhbWV0ZXIub3V0cHV0KSB7XG4gICAgICBsZW5ndGggPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0aGlzLm1heGltdW1MZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA8IHRoaXMubWF4aW11bUxlbmd0aCkge1xuICAgICAgcmV0dXJuICduY2hhcignICsgbGVuZ3RoICsgJyknO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ25jaGFyKCcgKyB0aGlzLm1heGltdW1MZW5ndGggKyAnKSc7XG4gICAgfVxuICB9LFxuXG4gIHJlc29sdmVMZW5ndGg6IGZ1bmN0aW9uKHBhcmFtZXRlcikge1xuICAgIC8vIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVyLnZhbHVlIGFzIG51bGwgfCBzdHJpbmcgfCB7IHRvU3RyaW5nKCk6IHN0cmluZyB9O1xuICAgIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVyLnZhbHVlIGFzIGFueTsgLy8gVGVtcG9yYXJ5IHNvbHV0aW9uLiBSZW1vdmUgJ2FueScgbGF0ZXIuXG5cbiAgICBpZiAocGFyYW1ldGVyLmxlbmd0aCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcGFyYW1ldGVyLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHBhcmFtZXRlci52YWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHBhcmFtZXRlci52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChwYXJhbWV0ZXIudmFsdWUubGVuZ3RoIC8gMikgfHwgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpLmxlbmd0aCB8fCAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXhpbXVtTGVuZ3RoO1xuICAgIH1cbiAgfSxcblxuICBnZW5lcmF0ZVR5cGVJbmZvOiBmdW5jdGlvbihwYXJhbWV0ZXIpIHtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoOCk7XG4gICAgYnVmZmVyLndyaXRlVUludDgodGhpcy5pZCwgMCk7XG4gICAgYnVmZmVyLndyaXRlVUludDE2TEUocGFyYW1ldGVyLmxlbmd0aCEgKiAyLCAxKTtcblxuICAgIGlmIChwYXJhbWV0ZXIuY29sbGF0aW9uKSB7XG4gICAgICBwYXJhbWV0ZXIuY29sbGF0aW9uLnRvQnVmZmVyKCkuY29weShidWZmZXIsIDMsIDAsIDUpO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXI7XG4gIH0sXG5cbiAgZ2VuZXJhdGVQYXJhbWV0ZXJMZW5ndGgocGFyYW1ldGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKHBhcmFtZXRlci52YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gTlVMTF9MRU5HVEg7XG4gICAgfVxuXG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gcGFyYW1ldGVyO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDIpO1xuXG4gICAgICBidWZmZXIud3JpdGVVSW50MTZMRShsZW5ndGgsIDApO1xuXG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZS50b1N0cmluZygpLCAndWNzMicpO1xuXG4gICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMik7XG4gICAgICBidWZmZXIud3JpdGVVSW50MTZMRShsZW5ndGgsIDApO1xuICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gIH0sXG5cbiAgKiBnZW5lcmF0ZVBhcmFtZXRlckRhdGEocGFyYW1ldGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKHBhcmFtZXRlci52YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXIudmFsdWU7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICB5aWVsZCB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgeWllbGQgQnVmZmVyLmZyb20odmFsdWUsICd1Y3MyJyk7XG4gICAgfVxuICB9LFxuXG4gIHZhbGlkYXRlOiBmdW5jdGlvbih2YWx1ZSk6IHN0cmluZyB8IG51bGwge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGVtaXRUeXBlQ29lcmNpb25XYXJuaW5nKCk7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTkNoYXI7XG5tb2R1bGUuZXhwb3J0cyA9IE5DaGFyO1xuXG5sZXQgdHlwZUNvZXJjaW9uV2FybmluZ0VtaXR0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGVtaXRUeXBlQ29lcmNpb25XYXJuaW5nKCkge1xuICBpZiAodHlwZUNvZXJjaW9uV2FybmluZ0VtaXR0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0eXBlQ29lcmNpb25XYXJuaW5nRW1pdHRlZCA9IHRydWU7XG5cbiAgcHJvY2Vzcy5lbWl0V2FybmluZyhcbiAgICAnYG5jaGFyYCB0eXBlIGNvZXJjaW9uIGZyb20gbm9uLXN0cmluZyB0eXBlIHZhbHVlIHZpYSBgLnRvU3RyaW5nKClgIG1ldGhvZCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQuJyxcbiAgICAnRGVwcmVjYXRpb25XYXJuaW5nJyxcbiAgICBOQ2hhci52YWxpZGF0ZVxuICApO1xufVxuIl19