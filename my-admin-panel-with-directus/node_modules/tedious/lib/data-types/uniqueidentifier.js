"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _guidParser = require("../guid-parser");

const NULL_LENGTH = Buffer.from([0x00]);
const DATA_LENGTH = Buffer.from([0x10]);
const UniqueIdentifier = {
  id: 0x24,
  type: 'GUIDN',
  name: 'UniqueIdentifier',
  declaration: function () {
    return 'uniqueidentifier';
  },
  resolveLength: function () {
    return 16;
  },

  generateTypeInfo() {
    return Buffer.from([this.id, 0x10]);
  },

  generateParameterLength(parameter, options) {
    if (parameter.value == null) {
      return NULL_LENGTH;
    }

    return DATA_LENGTH;
  },

  generateParameterData: function* (parameter, options) {
    if (parameter.value == null) {
      return;
    }

    yield Buffer.from((0, _guidParser.guidToArray)(parameter.value));
  },
  validate: function (value) {
    if (value == null) {
      return null;
    }

    if (typeof value !== 'string') {
      if (typeof value.toString !== 'function') {
        throw new TypeError('Invalid string.');
      }

      emitTypeCoercionWarning();
      value = value.toString();
    }

    if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(value)) {
      throw new TypeError('Invalid GUID.');
    }

    return value;
  }
};
var _default = UniqueIdentifier;
exports.default = _default;
module.exports = UniqueIdentifier;
let typeCoercionWarningEmitted = false;

function emitTypeCoercionWarning() {
  if (typeCoercionWarningEmitted) {
    return;
  }

  typeCoercionWarningEmitted = true;
  process.emitWarning('`uniqueidentifier` type coercion from non-string type value via `.toString()` method is deprecated and will be removed.', 'DeprecationWarning', UniqueIdentifier.validate);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhLXR5cGVzL3VuaXF1ZWlkZW50aWZpZXIudHMiXSwibmFtZXMiOlsiTlVMTF9MRU5HVEgiLCJCdWZmZXIiLCJmcm9tIiwiREFUQV9MRU5HVEgiLCJVbmlxdWVJZGVudGlmaWVyIiwiaWQiLCJ0eXBlIiwibmFtZSIsImRlY2xhcmF0aW9uIiwicmVzb2x2ZUxlbmd0aCIsImdlbmVyYXRlVHlwZUluZm8iLCJnZW5lcmF0ZVBhcmFtZXRlckxlbmd0aCIsInBhcmFtZXRlciIsIm9wdGlvbnMiLCJ2YWx1ZSIsImdlbmVyYXRlUGFyYW1ldGVyRGF0YSIsInZhbGlkYXRlIiwidG9TdHJpbmciLCJUeXBlRXJyb3IiLCJlbWl0VHlwZUNvZXJjaW9uV2FybmluZyIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZUNvZXJjaW9uV2FybmluZ0VtaXR0ZWQiLCJwcm9jZXNzIiwiZW1pdFdhcm5pbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFFQSxNQUFNQSxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLENBQUMsSUFBRCxDQUFaLENBQXBCO0FBQ0EsTUFBTUMsV0FBVyxHQUFHRixNQUFNLENBQUNDLElBQVAsQ0FBWSxDQUFDLElBQUQsQ0FBWixDQUFwQjtBQUVBLE1BQU1FLGdCQUEwQixHQUFHO0FBQ2pDQyxFQUFBQSxFQUFFLEVBQUUsSUFENkI7QUFFakNDLEVBQUFBLElBQUksRUFBRSxPQUYyQjtBQUdqQ0MsRUFBQUEsSUFBSSxFQUFFLGtCQUgyQjtBQUtqQ0MsRUFBQUEsV0FBVyxFQUFFLFlBQVc7QUFDdEIsV0FBTyxrQkFBUDtBQUNELEdBUGdDO0FBU2pDQyxFQUFBQSxhQUFhLEVBQUUsWUFBVztBQUN4QixXQUFPLEVBQVA7QUFDRCxHQVhnQzs7QUFhakNDLEVBQUFBLGdCQUFnQixHQUFHO0FBQ2pCLFdBQU9ULE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLENBQUMsS0FBS0csRUFBTixFQUFVLElBQVYsQ0FBWixDQUFQO0FBQ0QsR0FmZ0M7O0FBaUJqQ00sRUFBQUEsdUJBQXVCLENBQUNDLFNBQUQsRUFBWUMsT0FBWixFQUFxQjtBQUMxQyxRQUFJRCxTQUFTLENBQUNFLEtBQVYsSUFBbUIsSUFBdkIsRUFBNkI7QUFDM0IsYUFBT2QsV0FBUDtBQUNEOztBQUVELFdBQU9HLFdBQVA7QUFDRCxHQXZCZ0M7O0FBeUJqQ1ksRUFBQUEscUJBQXFCLEVBQUUsV0FBVUgsU0FBVixFQUFxQkMsT0FBckIsRUFBOEI7QUFDbkQsUUFBSUQsU0FBUyxDQUFDRSxLQUFWLElBQW1CLElBQXZCLEVBQTZCO0FBQzNCO0FBQ0Q7O0FBRUQsVUFBTWIsTUFBTSxDQUFDQyxJQUFQLENBQVksNkJBQVlVLFNBQVMsQ0FBQ0UsS0FBdEIsQ0FBWixDQUFOO0FBQ0QsR0EvQmdDO0FBaUNqQ0UsRUFBQUEsUUFBUSxFQUFFLFVBQVNGLEtBQVQsRUFBK0I7QUFDdkMsUUFBSUEsS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDakIsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCLFVBQUksT0FBT0EsS0FBSyxDQUFDRyxRQUFiLEtBQTBCLFVBQTlCLEVBQTBDO0FBQ3hDLGNBQU0sSUFBSUMsU0FBSixDQUFjLGlCQUFkLENBQU47QUFDRDs7QUFFREMsTUFBQUEsdUJBQXVCO0FBQ3ZCTCxNQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0csUUFBTixFQUFSO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDLGtFQUFrRUcsSUFBbEUsQ0FBdUVOLEtBQXZFLENBQUwsRUFBb0Y7QUFDbEYsWUFBTSxJQUFJSSxTQUFKLENBQWMsZUFBZCxDQUFOO0FBQ0Q7O0FBRUQsV0FBT0osS0FBUDtBQUNEO0FBcERnQyxDQUFuQztlQXVEZVYsZ0I7O0FBQ2ZpQixNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixnQkFBakI7QUFFQSxJQUFJbUIsMEJBQTBCLEdBQUcsS0FBakM7O0FBQ0EsU0FBU0osdUJBQVQsR0FBbUM7QUFDakMsTUFBSUksMEJBQUosRUFBZ0M7QUFDOUI7QUFDRDs7QUFFREEsRUFBQUEsMEJBQTBCLEdBQUcsSUFBN0I7QUFFQUMsRUFBQUEsT0FBTyxDQUFDQyxXQUFSLENBQ0UseUhBREYsRUFFRSxvQkFGRixFQUdFckIsZ0JBQWdCLENBQUNZLFFBSG5CO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4uL2RhdGEtdHlwZSc7XG5pbXBvcnQgeyBndWlkVG9BcnJheSB9IGZyb20gJy4uL2d1aWQtcGFyc2VyJztcblxuY29uc3QgTlVMTF9MRU5HVEggPSBCdWZmZXIuZnJvbShbMHgwMF0pO1xuY29uc3QgREFUQV9MRU5HVEggPSBCdWZmZXIuZnJvbShbMHgxMF0pO1xuXG5jb25zdCBVbmlxdWVJZGVudGlmaWVyOiBEYXRhVHlwZSA9IHtcbiAgaWQ6IDB4MjQsXG4gIHR5cGU6ICdHVUlETicsXG4gIG5hbWU6ICdVbmlxdWVJZGVudGlmaWVyJyxcblxuICBkZWNsYXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICd1bmlxdWVpZGVudGlmaWVyJztcbiAgfSxcblxuICByZXNvbHZlTGVuZ3RoOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gMTY7XG4gIH0sXG5cbiAgZ2VuZXJhdGVUeXBlSW5mbygpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oW3RoaXMuaWQsIDB4MTBdKTtcbiAgfSxcblxuICBnZW5lcmF0ZVBhcmFtZXRlckxlbmd0aChwYXJhbWV0ZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAocGFyYW1ldGVyLnZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBOVUxMX0xFTkdUSDtcbiAgICB9XG5cbiAgICByZXR1cm4gREFUQV9MRU5HVEg7XG4gIH0sXG5cbiAgZ2VuZXJhdGVQYXJhbWV0ZXJEYXRhOiBmdW5jdGlvbioocGFyYW1ldGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKHBhcmFtZXRlci52YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgeWllbGQgQnVmZmVyLmZyb20oZ3VpZFRvQXJyYXkocGFyYW1ldGVyLnZhbHVlKSk7XG4gIH0sXG5cbiAgdmFsaWRhdGU6IGZ1bmN0aW9uKHZhbHVlKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBlbWl0VHlwZUNvZXJjaW9uV2FybmluZygpO1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXsxMn0kL2kudGVzdCh2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgR1VJRC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVuaXF1ZUlkZW50aWZpZXI7XG5tb2R1bGUuZXhwb3J0cyA9IFVuaXF1ZUlkZW50aWZpZXI7XG5cbmxldCB0eXBlQ29lcmNpb25XYXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdFR5cGVDb2VyY2lvbldhcm5pbmcoKSB7XG4gIGlmICh0eXBlQ29lcmNpb25XYXJuaW5nRW1pdHRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHR5cGVDb2VyY2lvbldhcm5pbmdFbWl0dGVkID0gdHJ1ZTtcblxuICBwcm9jZXNzLmVtaXRXYXJuaW5nKFxuICAgICdgdW5pcXVlaWRlbnRpZmllcmAgdHlwZSBjb2VyY2lvbiBmcm9tIG5vbi1zdHJpbmcgdHlwZSB2YWx1ZSB2aWEgYC50b1N0cmluZygpYCBtZXRob2QgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkLicsXG4gICAgJ0RlcHJlY2F0aW9uV2FybmluZycsXG4gICAgVW5pcXVlSWRlbnRpZmllci52YWxpZGF0ZVxuICApO1xufVxuIl19